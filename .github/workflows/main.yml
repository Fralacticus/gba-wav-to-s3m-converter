# C'est un workflow de base pour vous aider à démarrer avec Actions

name: CI Building Dart

# Contrôle quand le workflow sera exécuté
on:
  # Déclenche le workflow sur les événements push ou pull request mais seulement pour la branche master
  #push:
    #branches: [ master ]
  #pull_request:
    #branches: [ master ]

  # Permet de lancer ce workflow manuellement depuis l'onglet Actions
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        sdk: [3.3.1]
        include:
          - os: ubuntu-latest
            output-name: gba-wav-to-s3m-converter-linux
          - os: macOS-latest
            output-name: gba-wav-to-s3m-converter-mac
          - os: windows-latest
            output-name: gba-wav-to-s3m-converter-windows.exe
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1.6.4
        with:
          sdk: ${{ matrix.sdk }}
      
      - name: Install dependencies
        run: dart pub get
        
      - name: Extract version
        run: echo "VERSION=$(grep 'version:' pubspec.yaml | cut -d ' ' -f 2)" >> $GITHUB_ENV
        
      - name: Create versioned build directory
        run: mkdir build

      - name: Compile applications
        run: dart compile exe ./bin/core/main.dart -o ./build/${{ matrix.output-name }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4.3.3
        with:
          name: native-executables
          path: build
                
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4   
      
      - uses: actions/download-artifact@v4.1.7
        with:
          path: build

      - name: Zip the executables
        run: |
          cd build
          zip -r executables-${{ env.VERSION }}.zip ./*
          cd ..

      - name: Create and upload release
        uses: softprops/action-gh-release@v2.0.4
        with:
          files: ./build/executables-${{ env.VERSION }}.zip
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: 'Release of version ${{ env.VERSION }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
   
